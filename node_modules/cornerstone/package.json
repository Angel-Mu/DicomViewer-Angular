{
  "name": "cornerstone",
  "version": "0.9.0",
  "description": "HTML5 Medical Image Viewer Component",
  "keywords": [
    "DICOM",
    "medical",
    "imaging"
  ],
  "author": {
    "name": "Chris Hafey"
  },
  "homepage": "https://github.com/chafey/cornerstone",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chafey/cornerstone.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "devDependencies": {
    "grunt-contrib-copy": "0.4.x",
    "grunt-contrib-qunit": "^0.4.0",
    "grunt-contrib-concat": "^0.3.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-contrib-uglify": "^0.4.0",
    "grunt-contrib-jshint": "^0.8.0",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-cssmin": "^0.9.0",
    "load-grunt-tasks": "^0.2.1"
  },
  "gitHead": "5fcbcaa3c7151f8f3b432811bce45443a9ea1a49",
  "readme": "Cornerstone Core\n================\n\nCornerstone is an open source project with a goal to deliver a complete web based medical imaging platform.  This\nrepository contains the Cornerstone Core component which is a lightweight JavaScript library for displaying\nmedical images in modern web browsers that support the HTML5 canvas element.\nCornerstone Core is not meant to be a complete application itself, but instead a component\nthat can be used as part of larger more complex applications.  See the\n[CornerstoneDemo](http://chafey.github.io/cornerstoneDemo/) for an example of using the various Cornerstone\nlibraries to build a simple study viewer.\n\nCornerstone Core is agnostic to the actual container used to store image pixels as well as the transport mechanism\nused to get the image data.  In fact, Cornerstone Core itself has no ability to read/parse or load images and instead\ndepends on one or more [ImageLoaders](https://github.com/chafey/cornerstone/wiki/ImageLoader) to function.\nThe goal here is to avoid constraining developers to work within a single container and transport (e.g. DICOM) since\nimages are stored in a variety of formats (including proprietary).  By providing flexibility with respect to the\ncontainer and transport, the highest performance image display may be obtained as no conversion to an alternate\ncontainer or transport is required.  It is hoped that developers feel empowered to load images from any type of image\ncontainer using any kind of transport.  See the\n[CornerstoneWADOImageLoader](https://github.com/chafey/cornerstoneWADOImageLoader) project for an example\nof a DICOM WADO based Image Loader.\n\nCornerstone Core is agnostic to the exact interaction paradigm being used.  It does not include any mouse, touch or\nkeyboard bindings to manipulate the various image properties such as scale, translation or ww/wc.  The goal here\nis to avoid constraining developers using this library to fit into a given ui paradigm.  It is hoped that developers\nare empowered to create new paradigms possibly using new input mechanisms to interact with medical images (e.g.\n[Kinect](http://en.wikipedia.org/wiki/Kinect) or [Accelerometer](http://en.wikipedia.org/wiki/Accelerometer).\nCornerstone does provide a set of API's allowing manipulation of the image properties via javascript.\nSee the [CornerstoneTools](https://github.com/chafey/cornerstoneTools) library for an example of common tools built on top of\nCornerstone.\n\nCommunity\n---------\n\nHave questions?  Try posting on our [google groups forum](https://groups.google.com/forum/#!forum/cornerstone-platform).\n\nLive Examples\n---------------\nThe best way to see the power of this library is to actually see it in use.\n\n[Click here for a list of examples of using the Cornerstone library.](https://rawgit.com/chafey/cornerstone/master/example/index.html)\n\nInstall\n-------\n\nGet a packaged source file:\n\n* [cornerstone.js](https://raw.githubusercontent.com/chafey/cornerstone/master/dist/cornerstone.js)\n* [cornerstone.min.js](https://raw.githubusercontent.com/chafey/cornerstone/master/dist/cornerstone.min.js)\n\nOr install via [Bower](http://bower.io/):\n\n> bower install cornerstone\n\n\nKey Features\n------------\n\n * HTML5/Javascript based library to easily add interactive medical images to web applications\n * Serves as a foundation to build more complex medical imaging applications from - enterprise viewer, report viewer, etc.\n * Supports all HTML5 based browsers including mobile, tablet and desktop\n * Displays all common medical image formats (e.g. 8 bit grayscale, 16 bit grayscale, RGB color)\n * High performance image display\n * Retrieval of images from different systems with different protocols via Image Loader plugin design\n * API support for changing viewport properties (e.g. ww/wc, zoom, pan, invert)\n\nBuild System\n============\n\nThis project uses grunt to build the software.\n\nPre-requisites:\n---------------\n\nNodeJs - [click to visit web site for installation instructions](http://nodejs.org).\n\ngrunt-cli\n\n> npm install -g grunt-cli\n\nbower\n\n> npm install -g bower\n\nCommon Tasks\n------------\n\nUpdate dependencies (after each pull):\n> npm install\n\n> bower install\n\nRunning the build:\n> grunt\n\nAutomatically running the build and unit tests after each source change:\n> grunt watch\n\nLinks\n=====\n\n[View the wiki for documentation on the concepts and APIs](https://github.com/chafey/cornerstone/wiki)\n\n[View Roadmap](docs/roadmap.md)\n\n[View Backlog](docs/backlog.md)\n\n[comp.protocols.dicom thread](https://groups.google.com/forum/#!topic/comp.protocols.dicom/_2fMh69GdAM)\n\n[Trello](https://trello.com/b/tGTDIyt4/cornerstone)\n\n[CornerstoneTools](https://github.com/chafey/cornerstoneTools) - A library of common tools that can be used with Cornerstone\n\n[CornerstoneWADOImageLoader ](https://github.com/chafey/cornerstoneWADOImageLoader) - A Cornerstone Image Loader that works with WADO\n\n[dicomParser ](https://github.com/chafey/dicomParser) - A JavaScript library designed to parse DICOM for web browsers\n\nCode Contributors\n=================\n\nI welcome pull requests, please see FAQ below for guidance on this.\n\n* @simonmd - CSS improvements in the cornerstoneDemo application\n* @doncharkowsky - The angle tool in cornerstoneTools\n* @prasath-rasterimages - Touch event bindings in cornerstoneTools\n* @jpamburn - Performance optimizations for signed data, fixes for image caching\n* @jmhmd - for getPixels() implementation\n* @devishree-raster - for flip and rotate implementation\n\nFAQ\n===\n\n_Why did you decide to license this library using the open source MIT license?_\n\nThe main reason this library is released as [open source](http://en.wikipedia.org/wiki/Open_source) is\nthat I believe that medical imaging in particular can do a lot more to improve patient outcomes\nbut the cost of doing so is prohibitive.  Making this library open source removes the cost barrier and will\nhopefully usher in a new set of medical imaging based applications.\n\nThe old adage [a picture is worth a thousand words](http://en.wikipedia.org/wiki/A_picture_is_worth_a_thousand_words)\nis very true in medical imaging.  When a patient is going through a disease process, they often face fear\nand confusion.  Medical terminology amplifies these issues as it is hard to understand and therefore\ndisempowering.  Medical imaging allows a mysterious health issue to be visualized and therefore brings a\nlevel of understanding that just can't be accomplished via textual information found in lab or radiology\nreports.  By helping a patient (and its supporting friends/family) connect with the disease visually through\nimages, it is believed that fear, anxiety and confusion will all be reduced which\nwill increase optimism and therefore patient outcomes.\n\nIt is my hope that this library be used to build a variety of applications and experiences\nto deliver on this vision.  The MIT license allows this library to be used in any type of application - personal,\nopen source and commercial and is therefore appropriate to support this vision.  If you are reading this,\nI hope you can join me in this mission as there is still a lot to be done.\n\n_Why doesn't Cornerstone natively support the display of DICOM images?_\n\nWhile DICOM has support for just about every type of medical image, there are many cases where medical images\nare not stored in DICOM format.  In many cases, a PACS may receive DICOM images but store them in a proprietary\nformat on disk.  In this case, it can be faster to access images by having an image loader that works with\na proprietary PACS interface that would not require conversion from the proprietary format into a standard format\nlike DICOM.  Another example of this is is dermatology where images are often taken using standard\ndigital cameras and are stored as JPEG not DICOM.\n\nThe main reason this library is not based around DICOM is that it wants to reach the widest possible adoption\nand that will be accomplished by supporting as many types of image containers and transports possible.\nAnother side effect of this approach is that the code base is smaller and easier to understand since\nit is focused on doing exactly one thing.  That being said, it is is expected that the majority of images\ndisplayed using this library will have originated as DICOM images.  It is therefore important to make sure\nthat there are no limitations with respect to displaying the different types of DICOM images and have robust\nsupporting libraries for DICOM.  Separate libraries to add DICOM specific support already exist, check out the\n[CornerstoneWADOImageLoader](https://github.com/chafey/cornerstoneWADOImageLoader) library and\nthe [dicomParser](https://github.com/chafey/dicomParser) library.\n\n_Why doesn't Cornerstone include basic tools like ww/wc using the mouse?_\n\nThere is no standard for user interaction in medical imaging and a wide variety of interaction paradigms exist.\nFor example, one medical imaging application may use the left mouse button to adjust ww/wc and another may use the\nright mouse button.  The main reason this library does not include tools is that it wants to reach the widest possible\nadoption and that will only be accomplished by making any interaction paradigm possible.  No tools\nare therefore provided with this library allowing users of the library to choose\nwhatever interaction paradigm they like.  It is also hoped that this approach will make it easier for developers\nto experiment with new user input mechanisms like [Kinect](http://en.wikipedia.org/wiki/Kinect) or\n[Accelerometer](http://en.wikipedia.org/wiki/Accelerometer).  Another side effect of this\napproach is that the code base is smaller and easier to understand since it is focused on doing exactly one\nthing.  Tools are provided using the separate [CornerstoneTools](https://github.com/chafey/cornerstoneTools)\nif desired.\n\n_Why does this library require HTML5 canvas when IE8 is the main browser used in healthcare?_\n\nThe fact that IE8 is the most popular commonly used web browser in healthcare right now is a temporary\nsituation.  It is expected that 50% of the industry will have HTML5 based web browsers deployed by the end\nof 2015 and 90% by 2017.  The library made a tradeoff to focus on the future platform to keep the code base\nsimple and avoid compromises related to older browser technology.  Note that it may be possible to get\nthis library to work on IE8 using [excanvas](https://code.google.com/p/explorercanvas/) but I haven't tried\nit yet.\n\n_Why doesn't this library support stacks of images?_\n\nImages stack functionality such as a CT series or MRI series can actually be quite complex.  Regardless of\nwhat stack functionality is desired, all stacks ultimately need to be able to display a single image and that\nis what this library is focused on doing.  Stack functionality is therefore pushed up to a higher layer.  The\n[CornerstoneTools](https://github.com/chafey/cornerstoneTools) contains stack functionality and is a good place\nto look to see how various stack related functionality is implemented.\n\n_How do you envision this library supporting 3D functionality such as MPR, MIP and VR?_\n\nThis library would be responsible for displaying the rendered image to the user.  The rendering of the\n3D image would be done by some other library - perhaps on the server side.  This library is purely 2D and has\nno knowledge of 3D image space.  It will probably make sense to have several layers on top of this library\nto provide 3D functionality.  For example, one layer that has a 3D viewport with properties such as transformation\nmatrix, slice thickness, transfer function/LUT, segmentation masks, etc.  And another 3D tools layer that provides\nvarious tools on top of the 3d viewport (rotate, zoom, segment, scroll, etc).  I do have a working 3D server that\nis integrated with cornerstone but am keeping the code closed for now (this may change in the future - TBD).\n\n_Why did you add jQuery as a dependency?_\n\nPrimarily for its custom event handling.\n\n_I would like to contribute code - how do I do this?_\n\nFork the repository, make your change and submit a pull request.\n\n_Any guidance on submitting changes?_\n\nWhile I do appreciate code contributions, I will not merge it unless it meets the following criteria:\n\n* Functionality is appropriate for the repository.  Consider posting on the forum if you are not sure\n* Code quality is acceptable.  I don't have coding standards defined, but make sure it passes jshint and looks like\n   the rest of the code in the repository.\n* Quality of design is acceptable.  This is a bit subjective so you should consider posting on the forum for specific guidance\n\nI will provide feedback on your pull request if it fails to meet any of the above.\n\nPlease consider separate pull requests for each feature as big pull requests are very time consuming to understand.\nIt is highly probably that I will reject a large pull request due to the time it would take to comprehend.\n\n_Will you add feature XYZ for me?_\n\nIf it is in the roadmap, I intend to implement it some day - probably when I actually need it.  If you really need\nsomething now and are willing to pay for it, try posting on the cornerstone platform google group\n\n_How mature is Cornerstone?_\n\nEach repository is at a different level of maturity.  There are at least 50 image viewer projects using Cornerstone\nand the feedback has been consistently strong about the architecture, design and quality.  The cornerstoneTools library\nis the least mature from a framework and breadth of functionality perspective - but the implemented features work well.\n\nCopyright\n=========\n\nCopyright 2015 Chris Hafey [chafey@gmail.com](mailto:chafey@gmail.com)\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/chafey/cornerstone/issues"
  },
  "_id": "cornerstone@0.9.0",
  "_shasum": "1735047fefe34cd316f0e9a7bf6b027e37428bc3",
  "_from": "git://github.com/chafey/cornerstone.git",
  "_resolved": "git://github.com/chafey/cornerstone.git#5fcbcaa3c7151f8f3b432811bce45443a9ea1a49"
}
